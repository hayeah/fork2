:plan<HEREDOC
Modify cmd/pick/main.go to add support for a second argument that represents user instruction. This argument will either be a file path (which should be read) or a direct instruction string. The instruction should be wrapped in "<user_instruction>" tags in the output.

Steps:
1. Update the Args struct to add a UserInstruction parameter
2. Create a helper function to generate the userInstruction string
3. Update the writeOutput function to include the user instruction
4. Modify the run function to handle the user instruction
HEREDOC

:modify cmd/pick/main.go

$description<HEREDOC
Update Args struct to add UserInstruction parameter
HEREDOC

$search<HEREDOC
// Args defines the command-line arguments
type Args struct {
	TokenEstimator string `arg:"--token-estimator" help:"Token count estimator to use: 'simple' (size/4) or 'tiktoken'" default:"simple"`
	All            bool   `arg:"-a,--all" help:"Select all files and output immediately"`
	Copy           bool   `arg:"-c,--copy" help:"Copy output to clipboard instead of stdout"`
	Diff           bool   `arg:"--diff" help:"Enable diff output format"`
	Directory      string `arg:"positional" help:"Directory to pick files from (default: current working directory)"`
}
HEREDOC

$replace<HEREDOC
// Args defines the command-line arguments
type Args struct {
	TokenEstimator  string `arg:"--token-estimator" help:"Token count estimator to use: 'simple' (size/4) or 'tiktoken'" default:"simple"`
	All             bool   `arg:"-a,--all" help:"Select all files and output immediately"`
	Copy            bool   `arg:"-c,--copy" help:"Copy output to clipboard instead of stdout"`
	Diff            bool   `arg:"--diff" help:"Enable diff output format"`
	Directory       string `arg:"positional" help:"Directory to pick files from (default: current working directory)"`
	UserInstruction string `arg:"positional" help:"User instruction string or path to instruction file"`
}
HEREDOC
